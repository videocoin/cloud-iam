syntax = "proto3";

package videocoin.iam.admin.v1;

import "google/api/field_behavior.proto";
// import "google/protobuf/empty.proto";
// import "google/api/annotations.proto";
// import "google/api/client.proto";

option go_package = "v1";

service IAM {
  rpc GetUserPublicKey(GetUserPublicKeyRequest) returns (PublicKey) {}

  /*
  rpc CreateRoleBinding(RoleBinding) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/rolebindings"
      body : "*"
    };
    option (google.api.method_signature) = "role_name,user_id";
  }

  // Deletes a [RoleBinding][cloud.api.iam.v1.RoleBinding].
  rpc DeleteRoleBinding(RoleBinding) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/rolebindings"
      body : "*"
    };
    option (google.api.method_signature) = "role_name,user_id";
  }

  // Lists [RoleBindings][cloud.api.iam.v1.RoleBinding].
  rpc ListRoleBindings(ListRoleBindingsRequest)
      returns (ListRoleBindingsResponse) {
    option (google.api.http) = {
      get : "/rolebindings"
      body : "*"
    };
    option (google.api.method_signature) = "user_id";
  }


  // Lists [Roles][cloud.api.iam.v1.Roles].
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get : "/v1/roles"
    };
  }

  // Gets a [Role][cloud.api.iam.v1.Role].
  rpc GetRole(GetRoleRequest) returns (Role) {
    option (google.api.http) = {
      get : "/v1/roles/{name=*}"
    };
  }
  */
}

message PublicKey { bytes public_key_data = 1; }

message GetUserPublicKeyRequest {
  string user_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  string key_id = 2 [ (google.api.field_behavior) = REQUIRED ];
}

/*
// A role in the Identity and Access Management API.
message Role {
  // The name of the role.
  string name = 1 [ (google.api.field_behavior) = REQUIRED ];

  // Optional A human-readable title for the role.  Typically this
  // is limited to 100 UTF-8 bytes.
  string title = 2;

  // Optional A human-readable description for the role.
  string description = 3;

  // The names of the permissions this role grants when bound in an IAM policy.
  repeated string included_permissions = 4;
}

// A view for Role objects.
enum RoleView {
  // Omits the `included_permissions` field.
  // This is the default value.
  BASIC = 0;

  // Returns all fields.
  FULL = 1;
}

// The request to get all roles defined under a resource.
message ListRolesRequest {
  // Optional limit on the number of roles to include in the response.
  int32 page_size = 1;

  // Optional pagination token returned in an earlier ListRolesResponse.
  string page_token = 2;

  // Optional view for the returned Role objects. When `FULL` is specified,
  // the `includedPermissions` field is returned, which includes a list of all
  // permissions in the role. The default value is `BASIC`, which does not
  // return the `includedPermissions` field.
  RoleView view = 3;
}

// The response containing the roles defined under a resource.
message ListRolesResponse {
  // The list of predefined roles.
  repeated Role roles = 1;

  // To retrieve the next page of results, set
  // `ListRolesRequest.page_token` to this value.
  string next_page_token = 2;
}

message GetRoleRequest {
  // The name of the role.
  string name = 1 [ (google.api.field_behavior) = REQUIRED ];
}

// A permission belongs to one or more roles.
message Permission {
  // The name of this Permission.
  string name = 1;

  // The title of this Permission.
  string title = 2;

  // A brief description of what this Permission is used for.
  string description = 3;
}

message RoleBinding {
  // The name of the role.
  string role_name = 1;

  // The user id.
  string user_id = 2;
}

message ListRoleBindingsRequest {
  // Optional
  string user_id = 1;

  // Optional pagination token returned in an earlier ListRoleBindingsRequest.
  string page_token = 2;
}

message ListRoleBindingsResponse { repeated RoleBinding bindings = 1; }
*/